<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:util="http://www.springframework.org/schema/util"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util.xsd"
        default-lazy-init="true">
    <!--
      0.3 For multiple context files. Contains beans which should *NOT* be included if another module uses this module
      -->
    <!-- ========================= PERSISTENCE DEFINITIONS ========================= -->
            <!--
            Bean Configuration: ConfigurationProperties
         -->

    <bean id="primaryDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName"><value>java:comp/env/jdbc/apexDS</value></property>
    </bean>

    <bean id="quartzDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName"><value>java:comp/env/jdbc/apexQuartzDS</value></property>
    </bean>

    <bean id="jbpmDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName">
            <value>java:comp/env/jdbc/apexJbpmDS</value>
        </property>
    </bean>

    <bean id="systemDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName"><value>java:comp/env/jdbc/apexSystemDS</value></property>
    </bean>



    <!--
      - Builds a Hibernate SessionFactory and makes it available as bean reference.
      - All necessary settings get specified here, without relying on an external
      - Hibernate config file like "WEB-INF/classes/hibernate.cfg.xml".
      -
      - The SessionFactory will use the locally defined DataSource in this context.
      - This allows for convenient sharing of transactions with plain JDBC access
      - code, if HibernateTransactionManager is explictly given the same DataSource.
      -
      - This definition could also use a JDBC DataSource specified via Hibernate
      - properties. Note that to be able to share transactions with plain JDBC access
      - code then, that DataSource would need to be a JNDI one that should match the
      - one given to HibernateTransactionManager and data access objects.
      -
      - This definition can be replaced by a JndiObjectFactoryBean definition for fetching
      - a JNDI-bound SessionFactory, but this only makes sense when using Hibernate's
      - JCA Connector (not recommended for most types of applications).
      -->
    <bean id="dataSource"  class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.h2.Driver"/>
        <property name="url" value="jdbc:h2:tcp://localhost:9092/~/test"/>
        <property name="username" value="sa"/>
        <property name="password" value=""/>
    </bean>

    <bean id="hibernateSessionFactory" class="com.zpmc.ztos.infra.base.common.beans.DefaultSessionFactory">
<!--        <property name="autoSpringMappingLocation">-->
<!--            <ref bean="beanFactoryLocation"/>-->
<!--        </property>-->

        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.H2Dialect</prop>
                <!-- prop key="hibernate.query.substitutions">true=1 false=0</prop -->
<!--                <prop key="hibernate.show_sql">false</prop>-->
<!--                <prop key="hibernate.order_updates">true</prop>-->
<!--                <prop key="hibernate.max_fetch_depth">1</prop>-->
<!--                &lt;!&ndash;prop key="hibernate.query.factory_class">org.hibernate.hql.classic.ClassicQueryTranslatorFactory</prop&ndash;&gt;-->
<!--                <prop key="hibernate.query.factory_class">org.hibernate.hql.ast.ASTQueryTranslatorFactory</prop>-->
<!--                &lt;!&ndash; Second level cache  - done through Cache context file and session factory &ndash;&gt;-->
<!--                &lt;!&ndash;<prop key="hibernate.cache.usesecondlevel_cache">true</prop>&ndash;&gt;-->
<!--                <prop key="hibernate.cache.region.factory_class">com.hazelcast.hibernate.HazelcastLocalCacheRegionFactory</prop><prop key="hibernate.cache.hazelcast.instance_name">navis-instance</prop>-->
            </props>
        </property>
        <property name="dataSource">
            <ref bean="dataSource"/>
        </property>
<!--        <property name="dataSource">-->
<!--            <ref bean="primaryDataSource"/>-->
<!--        </property>-->
<!--        <property name="entityInterceptor">-->
<!--            <ref bean="auditInterceptor"/>-->
<!--        </property>-->
<!--        <property name="upgradeManager">-->
<!--            <ref bean="upgradeManager"/>-->
<!--        </property>-->
<!--        <property name="dbHelper">-->
<!--            <ref bean="dbHelper"/>-->
<!--        </property>-->
    </bean>

    <!--  3rd. Party Cache: Cluster & Hibernate 2nd-level  -->
   <!--  For 1.0, default is the non coherence cached version  -->
   <util:map id="cacheProviderProperties" scope="singleton">
       <entry key="name" value="HAZELCAST"/>
   </util:map>

<!--    <bean id="configProvider" class="com.navis.cache.hazelcast.configuration.provider.CachedConfigProvider">-->
<!--        <property name="hibernateApi">-->
<!--            <ref bean="hibernateApi"/>-->
<!--        </property>-->
<!--        &lt;!&ndash; use the built-in cache provider, which means caches will not be Coherence Caches, but PrivateCache instances &ndash;&gt;-->
<!--        <property name="cacheProvider">-->
<!--            <value>HAZELCAST</value>-->
<!--        </property>-->
<!--    </bean>-->

<!--    <bean id="moduleDependency" class="com.navis.framework.util.context.modules.ModulesDependency">-->
<!--        <property name="modules">-->
<!--            <list>-->
<!--                <value>framework</value>-->
<!--                <value>spatial</value>-->
<!--                <value>xpscache</value>-->
<!--                <value>optimization</value>-->
<!--                <value>workflow</value>-->
<!--                <value>argo</value>-->
<!--                <value>inventory</value>-->
<!--                <value>services</value>-->
<!--                <value>edi</value>-->
<!--                <value>vessel</value>-->
<!--                <value>cargo</value>-->
<!--                <value>rail</value>-->
<!--                <value>orders</value>-->
<!--                <value>cap</value>-->
<!--                <value>crane</value>-->
<!--                <value>road</value>-->
<!--                <value>mensa</value>-->
<!--                <value>yard</value>-->
<!--                <value>control</value>-->
<!--                <value>apex</value>-->
<!--            </list>-->
<!--        </property>-->
<!--    </bean>-->

</beans>
